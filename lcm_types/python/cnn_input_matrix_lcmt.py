"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class cnn_input_matrix_lcmt(object):
    __slots__ = ["input_matrix"]

    __typenames__ = ["float"]

    __dimensions__ = [[150, 54]]

    def __init__(self):
        self.input_matrix = [ [ 0.0 for dim1 in range(54) ] for dim0 in range(150) ]

    def encode(self):
        buf = BytesIO()
        buf.write(cnn_input_matrix_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(150):
            buf.write(struct.pack('>54f', *self.input_matrix[i0][:54]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cnn_input_matrix_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cnn_input_matrix_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = cnn_input_matrix_lcmt()
        self.input_matrix = []
        for i0 in range(150):
            self.input_matrix.append(struct.unpack('>54f', buf.read(216)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if cnn_input_matrix_lcmt in parents: return 0
        tmphash = (0x6f6b7c08e02362e0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if cnn_input_matrix_lcmt._packed_fingerprint is None:
            cnn_input_matrix_lcmt._packed_fingerprint = struct.pack(">Q", cnn_input_matrix_lcmt._get_hash_recursive([]))
        return cnn_input_matrix_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

